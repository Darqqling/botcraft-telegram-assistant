
import { sendMessage } from './baseCommandHandler';
import { InlineKeyboardMarkup } from '@/services/telegramService';
import { createCollection, ensureUserExists } from '../collectionService';
import { isGroupChat } from './core/menuCommands';

// Track ongoing collection creation sessions by chat ID
const ongoingCreationSessions = new Map();

// Handle the callback for creating a new collection in personal chat
export const handleNewCollectionCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name;
  
  // Ensure user exists in our system
  ensureUserExists(userId, firstName, chatId);
  
  // Initial step for collection creation - ask for the collection title
  const message = `
–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º —Å–±–æ—Ä?
  `;
  
  const cancelButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }
      ]
    ]
  };
  
  // Start tracking this collection creation session
  ongoingCreationSessions.set(chatId, {
    stage: 'waiting_for_title',
    createdBy: userId,
    isGroupCollection: false
  });
  
  return sendMessage(
    botToken,
    chatId,
    message,
    { replyMarkup: cancelButton }
  );
};

// Handle group collection creation
export const handleGroupNewCollectionCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name;
  
  // Check if this is a group chat
  if (!isGroupChat(chatId)) {
    return sendMessage(
      botToken,
      chatId,
      `üö´ –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_collection —Ç–∞–º.`
    );
  }
  
  // Ensure user exists in our system
  ensureUserExists(userId, firstName, chatId);
  
  // Initial step for group collection creation
  const message = `
–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º —Å–±–æ—Ä?
  `;
  
  const cancelButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }
      ]
    ]
  };
  
  // Start tracking this collection creation session
  ongoingCreationSessions.set(chatId, {
    stage: 'waiting_for_title',
    createdBy: userId,
    isGroupCollection: true
  });
  
  return sendMessage(
    botToken,
    chatId,
    message,
    { replyMarkup: cancelButton }
  );
};

// Handle text messages in the context of collection creation
export const handleCollectionCreationMessage = async (
  message: any,
  botToken: string
): Promise<any> => {
  const chatId = message.chat.id;
  const userId = message.from.id;
  const text = message.text;
  
  // Check if there's an ongoing creation session for this chat
  const session = ongoingCreationSessions.get(chatId);
  if (!session) {
    // No ongoing session, ignore this message
    return null;
  }
  
  // Ensure only the creator can continue the creation process
  if (session.createdBy !== userId) {
    // This is not the creator, ignore
    return null;
  }
  
  // Process based on the current stage
  switch (session.stage) {
    case 'waiting_for_title':
      // Save the title and ask for description
      session.title = text;
      session.stage = 'waiting_for_description';
      
      return sendMessage(
        botToken,
        chatId,
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.",
        { replyMarkup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }]] } }
      );
      
    case 'waiting_for_description':
      // Save the description and ask for amount
      session.description = text;
      session.stage = 'waiting_for_amount';
      
      return sendMessage(
        botToken,
        chatId,
        "–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å?",
        { replyMarkup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }]] } }
      );
      
    case 'waiting_for_amount':
      // Try to parse the amount
      const amount = parseFloat(text.replace(/[^\d.,]/g, '').replace(',', '.'));
      
      if (isNaN(amount) || amount <= 0) {
        return sendMessage(
          botToken,
          chatId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
          { replyMarkup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }]] } }
        );
      }
      
      // Save the amount and ask for deadline
      session.amount = amount;
      session.stage = 'waiting_for_deadline';
      
      return sendMessage(
        botToken,
        chatId,
        "–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY",
        { replyMarkup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }]] } }
      );
      
    case 'waiting_for_deadline':
      // Try to parse the date (DD.MM.YYYY)
      let deadline;
      try {
        const [day, month, year] = text.split('.').map(Number);
        deadline = new Date(year, month - 1, day);
        
        if (isNaN(deadline.getTime())) {
          throw new Error("Invalid date");
        }
      } catch (e) {
        return sendMessage(
          botToken,
          chatId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2023).",
          { replyMarkup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }]] } }
        );
      }
      
      // Save the deadline and finalize the collection
      session.deadline = deadline.getTime();
      
      // Create the collection
      try {
        const collection = await createCollection(
          botToken,
          userId,
          session.title,
          session.description,
          session.amount,
          [], // participantIds - empty initially
          undefined, // giftRecipientId
          session.isGroupCollection ? chatId : undefined // groupChatId for group collections
        );
        
        // Clear the session
        ongoingCreationSessions.delete(chatId);
        
        // Format the date for display
        const deadlineDate = new Date(session.deadline);
        const formattedDeadline = `${deadlineDate.getDate().toString().padStart(2, '0')}.${(deadlineDate.getMonth() + 1).toString().padStart(2, '0')}.${deadlineDate.getFullYear()}`;
        
        // Send confirmation message
        const confirmMessage = `
–°–±–æ—Ä —Å–æ–∑–¥–∞–Ω! üéÅ ${session.title}, —Ü–µ–ª—å ‚Äì ${session.amount}‚ÇΩ, –¥–µ–¥–ª–∞–π–Ω ‚Äì ${formattedDeadline}.
        `;
        
        const keyboard: InlineKeyboardMarkup = {
          inline_keyboard: [
            [
              session.isGroupCollection 
                ? { text: "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä", callback_data: `start_collection:${collection.id}` }
                : { text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: `confirm_payment:${collection.id}` }
            ],
            [
              { text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
            ]
          ]
        };
        
        return sendMessage(botToken, chatId, confirmMessage, { replyMarkup: keyboard });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞:', error);
        ongoingCreationSessions.delete(chatId);
        return sendMessage(botToken, chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      
    default:
      // Unknown stage, reset the session
      ongoingCreationSessions.delete(chatId);
      return sendMessage(
        botToken,
        chatId,
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∑–∞–Ω–æ–≤–æ.",
        { replyMarkup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }]] } }
      );
  }
};

// Handle the start collection button
export const handleStartCollectionCallback = async (
  callbackQuery: any,
  botToken: string
): Promise<any> => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name;
  
  // Parse the collection ID from the callback data
  const parts = callbackQuery.data.split(':');
  const collectionId = parts[1];
  
  // Get the collection details
  try {
    const collection = require('../storageService').getCollectionById(collectionId);
    
    if (!collection) {
      return sendMessage(botToken, chatId, "–û—à–∏–±–∫–∞: —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
    
    // Update collection status to active
    await require('../collectionService').updateCollectionStatus(botToken, collectionId, 'active');
    
    // Send announcement to the group chat
    const message = `
üÜï –ù–æ–≤—ã–π —Å–±–æ—Ä! 
üéÅ ${collection.title} ‚Äì ${collection.description}
üéØ –¶–µ–ª—å: ${collection.targetAmount}‚ÇΩ 
üìÖ –î–µ–¥–ª–∞–π–Ω: ${new Date(collection.deadline).toLocaleDateString('ru-RU')} 
üí≥ –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –∏–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è.
    `;
    
    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: `join:${collectionId}` },
          { text: "üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data: `decline:${collectionId}` }
        ]
      ]
    };
    
    return sendMessage(botToken, chatId, message, { replyMarkup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∞:', error);
    return sendMessage(botToken, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
};

// Add more collection-related handlers here
export const checkCollectionCreationState = (chatId: number) => {
  return ongoingCreationSessions.get(chatId);
};

// Create collection with provided details (legacy method, kept for compatibility)
export const createNewCollection = async (
  token: string,
  organizerId: number,
  title: string,
  description: string,
  targetAmount: number,
  chatId: number,
  isGroupCollection: boolean = false
): Promise<any> => {
  try {
    // For now, we'll create an empty participants array
    const participantIds: number[] = [];
    
    // Create the collection
    const collection = await createCollection(
      token,
      organizerId,
      title,
      description,
      targetAmount,
      participantIds,
      undefined, // giftRecipientId
      isGroupCollection ? chatId : undefined // groupChatId for group collections
    );
    
    // Send confirmation message with collection details
    const message = `
‚úÖ –°–±–æ—Ä "${title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

ID —Å–±–æ—Ä–∞: ${collection.id}
–¶–µ–ª—å: ${targetAmount} —Ä—É–±.
${description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}` : ''}

${isGroupCollection 
  ? '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.' 
  : '–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å ID —Å–±–æ—Ä–∞ —Å –Ω–∏–º–∏.'}
    `;
    
    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üëÄ –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `status:${collection.id}` }
        ]
      ]
    };
    
    if (isGroupCollection) {
      keyboard.inline_keyboard.push([
        { text: "üëã –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data: `join:${collection.id}` }
      ]);
    }
    
    keyboard.inline_keyboard.push([
      { text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
    ]);
    
    return sendMessage(token, chatId, message, { replyMarkup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞:', error);
    return sendMessage(token, chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};
