
import { sendMessage } from './baseCommandHandler';
import { InlineKeyboardMarkup } from '@/services/telegramService';
import { createCollection, ensureUserExists } from '../collectionService';

// Handle the callback for creating a new collection
export const handleNewCollectionCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name;
  
  // Ensure user exists in our system
  ensureUserExists(userId, firstName, chatId);
  
  // Initial step for collection creation - ask for the collection title
  const message = `
üåü –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ üåü

–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ò–≤–∞–Ω–∞" –∏–ª–∏ "–ü–æ–¥–∞—Ä–æ–∫ –∫–æ–ª–ª–µ–≥–µ").

–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞".
  `;
  
  const cancelButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }
      ]
    ]
  };
  
  return sendMessage(
    botToken,
    chatId,
    message,
    { replyMarkup: cancelButton }
  );
};

// Handle group collection creation
export const handleGroupNewCollectionCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const firstName = callbackQuery.from.first_name;
  
  // Ensure user exists in our system
  ensureUserExists(userId, firstName, chatId);
  
  // Initial step for group collection creation
  const message = `
üë• –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ üë•

–≠—Ç–æ—Ç —Å–±–æ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É, –∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.

–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ò–≤–∞–Ω–∞" –∏–ª–∏ "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫").

–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞".
  `;
  
  const cancelButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "back_to_main" }
      ]
    ]
  };
  
  return sendMessage(
    botToken,
    chatId,
    message,
    { replyMarkup: cancelButton }
  );
};

// Create collection with provided details
export const createNewCollection = async (
  token: string,
  organizerId: number,
  title: string,
  description: string,
  targetAmount: number,
  chatId: number,
  isGroupCollection: boolean = false
): Promise<any> => {
  try {
    // For now, we'll create an empty participants array
    // In a real implementation, this would be populated based on user selection
    const participantIds: number[] = [];
    
    // Create the collection
    const collection = await createCollection(
      token,
      organizerId,
      title,
      description,
      targetAmount,
      participantIds,
      undefined, // giftRecipientId
      isGroupCollection ? chatId : undefined // groupChatId for group collections
    );
    
    // Send confirmation message with collection details
    const message = `
‚úÖ –°–±–æ—Ä "${title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

ID —Å–±–æ—Ä–∞: ${collection.id}
–¶–µ–ª—å: ${targetAmount} —Ä—É–±.
${description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}` : ''}

${isGroupCollection 
  ? '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.' 
  : '–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å ID —Å–±–æ—Ä–∞ —Å –Ω–∏–º–∏.'}
    `;
    
    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üëÄ –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `status:${collection.id}` }
        ]
      ]
    };
    
    if (isGroupCollection) {
      keyboard.inline_keyboard.push([
        { text: "üëã –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data: `join:${collection.id}` }
      ]);
    }
    
    keyboard.inline_keyboard.push([
      { text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
    ]);
    
    return sendMessage(token, chatId, message, { replyMarkup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞:', error);
    return sendMessage(token, chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};
