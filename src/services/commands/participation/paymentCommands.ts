
import { ensureUserExists } from '../../collectionService';
import { getCollectionById, getUserById, saveCollection } from '../../storageService';
import { sendMessage } from '../baseCommandHandler';
import { InlineKeyboardMarkup } from '@/services/telegramService';
import { addPayment, notifyPaymentSuccess } from '../../collectionService';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
export const handlePay = async (
  token: string,
  userId: number,
  chatId: number,
  firstName: string,
  text: string,
  lastName?: string,
  username?: string
): Promise<string> => {
  try {
    // –§–æ—Ä–º–∞—Ç: /pay collection_id amount
    const parts = text.replace('/pay', '').trim().split(' ');
    
    if (parts.length < 2) {
      return '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/pay ID_—Å–±–æ—Ä–∞ —Å—É–º–º–∞';
    }
    
    const collectionId = parts[0].trim();
    const amount = parseFloat(parts[1].trim());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    if (!collectionId) {
      return '–û—à–∏–±–∫–∞: ID —Å–±–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.';
    }
    
    if (isNaN(amount) || amount <= 0) {
      return '–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.';
    }
    
    const collection = getCollectionById(collectionId);
    
    if (!collection) {
      return '–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }
    
    if (collection.status !== 'active') {
      return `–û—à–∏–±–∫–∞: —Å–±–æ—Ä "${collection.title}" –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const isParticipant = collection.participants.some(p => p.userId === userId);
    
    if (!isParticipant) {
      return `–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–±–æ—Ä–∞ "${collection.title}".`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensureUserExists(userId, firstName, chatId, username, lastName);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const inlineKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üíµ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data: `i_paid:${collectionId}:${amount}` }
        ],
        [
          { text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞", callback_data: `payment_options:${collectionId}:${amount}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `status:${collectionId}` }
        ]
      ]
    };
    
    await sendMessage(token, chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤–∑–Ω–æ—Å–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${amount} —Ä—É–±. –¥–ª—è —Å–±–æ—Ä–∞ "${collection.title}":`, 
      { replyMarkup: inlineKeyboard });
    
    return '';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
export const handlePayCallback = async (
  token: string,
  userId: number,
  chatId: number,
  firstName: string,
  parts: string[],
  lastName?: string,
  username?: string
): Promise<string> => {
  try {
    // –§–æ—Ä–º–∞—Ç: pay:collection_id
    if (parts.length < 2) {
      return '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã.';
    }
    
    const collectionId = parts[1];
    
    const collection = getCollectionById(collectionId);
    
    if (!collection) {
      return '–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }
    
    if (collection.status !== 'active') {
      return `–û—à–∏–±–∫–∞: —Å–±–æ—Ä "${collection.title}" –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const isParticipant = collection.participants.some(p => p.userId === userId);
    
    if (!isParticipant) {
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
      const inlineKeyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [
            { text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É", callback_data: `join:${collectionId}` }
          ]
        ]
      };
      
      await sendMessage(token, chatId, `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–±–æ—Ä–∞ "${collection.title}". –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å:`, 
        { replyMarkup: inlineKeyboard });
      
      return '';
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    ensureUserExists(userId, firstName, chatId, username, lastName);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º
    const inlineKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "500 —Ä—É–±.", callback_data: `pay_amount:${collectionId}:500` },
          { text: "1000 —Ä—É–±.", callback_data: `pay_amount:${collectionId}:1000` }
        ],
        [
          { text: "2000 —Ä—É–±.", callback_data: `pay_amount:${collectionId}:2000` },
          { text: "5000 —Ä—É–±.", callback_data: `pay_amount:${collectionId}:5000` }
        ],
        [
          { text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: `payment_options:${collectionId}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `status:${collectionId}` }
        ]
      ]
    };
    
    await sendMessage(token, chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–±–æ—Ä "${collection.title}":`, 
      { replyMarkup: inlineKeyboard });
    
    return '';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
export const handleConfirmPayment = async (
  token: string,
  organizerId: number,
  userId: number,
  collectionId: string,
  amount: number
): Promise<boolean> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collection = getCollectionById(collectionId);
    
    if (!collection) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    if (collection.organizerId !== organizerId) {
      return false;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
    await addPayment(token, collectionId, userId, amount);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
    await notifyPaymentSuccess(token, collectionId, userId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
    const organizer = getUserById(organizerId);
    if (organizer) {
      const user = getUserById(userId);
      const userName = user ? `${user.firstName} ${user.lastName || ''}`.trim() : `–£—á–∞—Å—Ç–Ω–∏–∫ ${userId}`;
      
      await sendMessage(token, organizer.chatId, `–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç ${userName} –Ω–∞ —Å—É–º–º—É ${amount} —Ä—É–±. –¥–ª—è —Å–±–æ—Ä–∞ "${collection.title}".`);
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return false;
  }
};
