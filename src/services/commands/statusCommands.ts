
import { sendMessage } from './core/messageUtils';
import { InlineKeyboardMarkup } from '@/services/telegramService';
import { getCollectionById } from '../storageService';

// Using any for simplicity since we're just creating stubs to fix type errors
export const handleStatusCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  // Parse the collection ID from the callback data
  // Assuming the callback data format is: "status:collectionId"
  const callbackData = callbackQuery.data;
  const parts = callbackData.split(':');
  const collectionId = parts[1];
  
  console.log(`[StatusCommands] Handling status callback for collection ${collectionId} in chat ${chatId}`);
  
  // Get collection details
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(
      botToken,
      chatId,
      `–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    );
  }
  
  // Create keyboard with action buttons
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üí∞ –í–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data: `pay:${collectionId}` }
      ],
      [
        { text: "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", callback_data: `collection_status:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }
      ]
    ]
  };
  
  // Send a status message
  return sendMessage(
    botToken,
    chatId,
    `–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ "${collection.title}":
    
üìä –°–æ–±—Ä–∞–Ω–æ: ${collection.currentAmount} –∏–∑ ${collection.targetAmount} —Ä—É–±. (${Math.round(collection.currentAmount / collection.targetAmount * 100)}%)
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${collection.participants.length}
‚è±Ô∏è –°—Ç–∞—Ç—É—Å: ${getStatusText(collection.status)}`,
    { replyMarkup: keyboard }
  );
};

export const handleCollectionStatusCallback = (
  callbackQuery: any, 
  botToken: string
): Promise<any> => {
  // Get the chat ID and user ID from the callback query
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  // Parse the collection ID from the callback data
  // Assuming the callback data format is: "collection_status:collectionId"
  const callbackData = callbackQuery.data;
  const parts = callbackData.split(':');
  const collectionId = parts[1];
  
  console.log(`[StatusCommands] Handling collection_status callback for collection ${collectionId} in chat ${chatId}`);
  
  // Get collection details
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(
      botToken,
      chatId,
      `–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    );
  }
  
  // Create keyboard with action buttons
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üí∞ –í–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data: `pay:${collectionId}` }
      ]
    ]
  };
  
  // Add organizer actions if the user is the organizer
  if (collection.organizerId === userId) {
    keyboard.inline_keyboard.push([
      { text: "üì© –ù–∞–ø–æ–º–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data: `send_reminders:${collectionId}` }
    ]);
    
    if (collection.status === 'active' && collection.currentAmount >= collection.targetAmount) {
      keyboard.inline_keyboard.push([
        { text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä", callback_data: `complete_collection:${collectionId}` }
      ]);
    }
  }
  
  keyboard.inline_keyboard.push([
    { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `status:${collectionId}` }
  ]);
  
  // Get participants information
  const paidParticipants = collection.participants.filter(p => p.hasPaid).length;
  const pendingParticipants = collection.participants.length - paidParticipants;
  
  // Send a detailed collection status message
  return sendMessage(
    botToken,
    chatId,
    `–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ "${collection.title}":
    
üí∞ –°–æ–±—Ä–∞–Ω–æ: ${collection.currentAmount} –∏–∑ ${collection.targetAmount} —Ä—É–±. (${Math.round(collection.currentAmount / collection.targetAmount * 100)}%)
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ–≥–æ: ${collection.participants.length}
‚úÖ –û–ø–ª–∞—Ç–∏–ª–∏: ${paidParticipants}
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: ${pendingParticipants}
‚è±Ô∏è –°—Ç–∞—Ç—É—Å: ${getStatusText(collection.status)}
üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(collection.createdAt).toLocaleDateString()}`,
    { replyMarkup: keyboard }
  );
};

// Helper function to convert status codes to human-readable text
const getStatusText = (status: string): string => {
  switch (status) {
    case 'pending':
      return '–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏';
    case 'active':
      return '–ê–∫—Ç–∏–≤–µ–Ω';
    case 'completed':
      return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    case 'cancelled':
      return '–û—Ç–º–µ–Ω–µ–Ω';
    case 'frozen':
      return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
};
