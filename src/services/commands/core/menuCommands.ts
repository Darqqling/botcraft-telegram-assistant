
import { InlineKeyboardMarkup } from '../../telegramService';
import { sendMessage } from './messageUtils';

// Helper function to check if chat is a group chat
const isGroupChat = (chatId: number): boolean => {
  // In Telegram, group chat IDs are typically negative
  return chatId < 0;
};

// Handle start command by showing main menu buttons
export const handleStartCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  console.log(`[MenuCommands] Handling start command for user ${userId} in chat ${chatId}`);
  
  // Different welcome message based on chat type
  if (isGroupChat(chatId)) {
    // Group chat welcome message
    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Å–±–æ—Ä–æ–≤ –¥–µ–Ω–µ–≥!

–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ üîπ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–±–æ—Ä–∞—Ö
‚Ä¢ üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –∫–æ–º–∞–Ω–¥–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `;

    const groupMainMenu: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä", callback_data: "group_new_collection" }
        ],
        [
          { text: "üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data: "how_it_works" }
        ],
        [
          { text: "üîπ –ü–æ–º–æ—â—å", callback_data: "help" }
        ]
      ]
    };

    return sendMessage(token, chatId, welcomeMessage, { replyMarkup: groupMainMenu });
  } else {
    // Personal chat welcome message
    const welcomeMessage = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ë–æ—Ç!

–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ:
‚Ä¢ üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–±–æ—Ä—ã
‚Ä¢ ‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å

üö´ –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `;

    const personalMainMenu: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–±–æ—Ä—ã", callback_data: "my_collections" }
        ],
        [
          { text: "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data: "how_it_works" }
        ],
        [
          { text: "‚ùì –ü–æ–º–æ—â—å", callback_data: "help" }
        ]
      ]
    };

    return sendMessage(token, chatId, welcomeMessage, { replyMarkup: personalMainMenu });
  }
};

// Handle help command
export const handleHelpCommand = async (
  token: string,
  chatId: number
): Promise<any> => {
  console.log(`[MenuCommands] Handling help command in chat ${chatId}`);
  
  // Different help message based on chat type
  let helpMessage = '';
  
  if (isGroupChat(chatId)) {
    helpMessage = `
üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/new_collection - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä –≤ –≥—Ä—É–ø–ø–µ

–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–±–æ—Ä—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ–º—É.
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–±–æ—Ä–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    `;
  } else {
    helpMessage = `
üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/my_collections - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Å–±–æ—Ä—ã

–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–±–æ—Ä–∞–º–∏ –∏ –≤–Ω–æ—Å–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–±–æ—Ä–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_collection.
    `;
  }

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, helpMessage, { replyMarkup: backButton });
};

// Handle how_it_works command
export const handleHowItWorksCommand = async (
  token: string,
  chatId: number
): Promise<any> => {
  console.log(`[MenuCommands] Handling how_it_works command in chat ${chatId}`);
  
  const howItWorksMessage = `
üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ë–æ—Ç:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–±–æ—Ä –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —É–∫–∞–∑–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
2Ô∏è‚É£ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
3Ô∏è‚É£ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–Ω–æ—Å—è—Ç —Å–≤–æ–∏ –≤–∑–Ω–æ—Å—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
4Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ —Å–æ–±—Ä–∞–Ω–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä
5Ô∏è‚É£ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞

–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–±–æ—Ä–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç–µ, –∏ –≤–Ω–æ—Å–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.
–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–±–æ—Ä—ã.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, howItWorksMessage, { replyMarkup: backButton });
};

// Handle my_collections command
export const handleMyCollectionsCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  console.log(`[MenuCommands] Handling my_collections command for user ${userId} in chat ${chatId}`);
  
  // Check if we're in a group chat
  if (isGroupChat(chatId)) {
    return sendMessage(token, chatId, `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
  }
  
  // This will be implemented to fetch and display the user's collections
  const collectionsMessage = `
üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã:

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. 
–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /new_collection.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, collectionsMessage, { replyMarkup: backButton });
};

// Handle back to main menu command
export const handleBackToMainCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  console.log(`[MenuCommands] Handling back_to_main command for user ${userId} in chat ${chatId}`);
  return handleStartCommand(token, chatId, userId);
};

// Export the isGroupChat helper to use it in other files
export { isGroupChat };
