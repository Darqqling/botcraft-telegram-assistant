
import { InlineKeyboardMarkup } from '../../telegramService';
import { sendMessage } from './messageUtils';
import { getCollectionById, saveCollection, getUserById } from '../../storageService';
import { updateCollectionStatus } from '../../collectionService';
import { v4 as uuidv4 } from 'uuid';

// Handle payment options command
export const handlePaymentOptionsCommand = async (
  token: string,
  chatId: number,
  collectionId: string
): Promise<any> => {
  console.log(`[PaymentHandlers] Displaying payment options for collection ${collectionId} to chat ${chatId}`);
  
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.");
  }

  const paymentMessage = `
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ "${collection.title}":

–°–µ–π—á–∞—Å –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª".

–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${getUserById(collection.organizerId)?.firstName || "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"}
–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: ${collection.targetAmount} —Ä—É–±.
–°–æ–±—Ä–∞–Ω–æ: ${collection.currentAmount} —Ä—É–±.
  `;

  const paymentOptions: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É", callback_data: `i_paid:${collectionId}` }
      ],
      [
        { text: "500 —Ä—É–±.", callback_data: `i_paid:${collectionId}:500` },
        { text: "1000 —Ä—É–±.", callback_data: `i_paid:${collectionId}:1000` }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `pay:${collectionId}` }
      ]
    ]
  };

  return sendMessage(token, chatId, paymentMessage, { replyMarkup: paymentOptions });
};

// Handle "I paid" confirmation
export const handleIPaidCommand = async (
  token: string,
  chatId: number,
  userId: number,
  firstName: string,
  collectionId: string,
  amount: number = 1000
): Promise<any> => {
  console.log(`[PaymentHandlers] Processing payment confirmation for user ${userId} in collection ${collectionId} for ${amount} rubles`);
  
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.");
  }
  
  // Check if user is a participant
  const participantIndex = collection.participants.findIndex(p => p.userId === userId);
  
  if (participantIndex === -1) {
    const joinKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É", callback_data: `join:${collectionId}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
        ]
      ]
    };
    
    return sendMessage(token, chatId, `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–±–æ—Ä–∞. –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å:`, 
      { replyMarkup: joinKeyboard });
  }

  // This will send confirmation to the user
  const confirmationMessage = `
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∑–Ω–æ—Å!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø–ª–∞—Ç–µ–∂–µ:
- –°—É–º–º–∞: ${amount} —Ä—É–±.
- –°–±–æ—Ä: "${collection.title}"

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ ${amount} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º, –≤–∞—à –≤–∑–Ω–æ—Å –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ —Å–±–æ—Ä–µ.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  await sendMessage(token, chatId, confirmationMessage, { replyMarkup: backButton });
  
  // Send notification to the organizer with confirmation button
  const organizer = getUserById(collection.organizerId);
  
  if (organizer && organizer.chatId) {
    const notificationMessage = `
üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ!

–£—á–∞—Å—Ç–Ω–∏–∫: ${firstName}
–°–±–æ—Ä: "${collection.title}"
–°—É–º–º–∞: ${amount} —Ä—É–±.

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:
    `;
    
    const confirmationKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: `confirm_payment:${collectionId}:${userId}:${amount}` }
        ],
        [
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_payment:${collectionId}:${userId}:${amount}` }
        ]
      ]
    };
    
    await sendMessage(token, organizer.chatId, notificationMessage, { replyMarkup: confirmationKeyboard });
    console.log(`[PaymentHandlers] Sent payment confirmation request to organizer ${organizer.id}`);
  } else {
    console.error(`[PaymentHandlers] Could not notify organizer: organizer not found or has no chat ID`);
  }
  
  return { ok: true };
};

// Handle payment confirmation by organizer
export const handleConfirmPaymentCommand = async (
  token: string,
  chatId: number,
  userId: number,
  collectionId: string,
  participantId: number,
  amount: number
): Promise<any> => {
  console.log(`[PaymentHandlers] Processing payment confirmation by organizer ${userId} for participant ${participantId} in collection ${collectionId}`);
  
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.");
  }
  
  // Verify that the user confirming is the organizer
  if (collection.organizerId !== userId) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–±–æ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.");
  }
  
  // Find the participant
  const participantIndex = collection.participants.findIndex(p => p.userId === participantId);
  
  if (participantIndex === -1) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Å–±–æ—Ä–µ.");
  }
  
  // Update participant payment status
  collection.participants[participantIndex].hasPaid = true;
  collection.participants[participantIndex].contribution += amount;
  
  // Update collection total amount
  collection.currentAmount += amount;
  
  // Save changes to collection
  saveCollection(collection);
  
  // Add transaction record (would be implemented in a production system)
  // addTransaction(collectionId, participantId, amount, 'contribution');
  
  // Record activity in the system log
  const transaction = {
    id: uuidv4(),
    collectionId: collectionId,
    userId: participantId,
    amount: amount,
    type: 'contribution' as const,
    timestamp: Date.now()
  };
  
  // Check if target amount is reached and update status if needed
  if (collection.currentAmount >= collection.targetAmount && collection.status === 'active') {
    collection.status = 'completed';
    saveCollection(collection);
    
    // Update collection status and notify participants
    await updateCollectionStatus(token, collectionId, 'completed');
  }
  
  // Notify organizer
  const confirmationMessage = `
‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–£—á–∞—Å—Ç–Ω–∏–∫: ${getUserById(participantId)?.firstName || `–£—á–∞—Å—Ç–Ω–∏–∫ ID:${participantId}`}
–°–±–æ—Ä: "${collection.title}"
–°—É–º–º–∞: ${amount} —Ä—É–±.

–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞: ${collection.currentAmount} / ${collection.targetAmount} —Ä—É–±.
${collection.currentAmount >= collection.targetAmount ? 'üéâ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!' : ''}
  `;
  
  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `collection_status:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };
  
  await sendMessage(token, chatId, confirmationMessage, { replyMarkup: backButton });
  
  // Notify participant about confirmed payment
  const participant = getUserById(participantId);
  if (participant && participant.chatId) {
    const participantMessage = `
‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–°–±–æ—Ä: "${collection.title}"
–°—É–º–º–∞: ${amount} —Ä—É–±.

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéä
    `;
    
    const participantKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `status:${collectionId}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
        ]
      ]
    };
    
    await sendMessage(token, participant.chatId, participantMessage, { replyMarkup: participantKeyboard });
  }
  
  return { ok: true };
};

// Handle payment rejection by organizer
export const handleRejectPaymentCommand = async (
  token: string,
  chatId: number,
  userId: number,
  collectionId: string,
  participantId: number,
  amount: number
): Promise<any> => {
  console.log(`[PaymentHandlers] Processing payment rejection by organizer ${userId} for participant ${participantId} in collection ${collectionId}`);
  
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.");
  }
  
  // Verify that the user rejecting is the organizer
  if (collection.organizerId !== userId) {
    return sendMessage(token, chatId, "–û—à–∏–±–∫–∞: —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–±–æ—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂–∏.");
  }
  
  // Notify organizer
  const rejectMessage = `
‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!

–£—á–∞—Å—Ç–Ω–∏–∫: ${getUserById(participantId)?.firstName || `–£—á–∞—Å—Ç–Ω–∏–∫ ID:${participantId}`}
–°–±–æ—Ä: "${collection.title}"
–°—É–º–º–∞: ${amount} —Ä—É–±.

–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂. –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
  `;
  
  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `collection_status:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };
  
  await sendMessage(token, chatId, rejectMessage, { replyMarkup: backButton });
  
  // Notify participant about rejected payment
  const participant = getUserById(participantId);
  if (participant && participant.chatId) {
    const participantMessage = `
‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

–°–±–æ—Ä: "${collection.title}"
–°—É–º–º–∞: ${amount} —Ä—É–±.

–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.
    `;
    
    const participantKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `status:${collectionId}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
        ]
      ]
    };
    
    await sendMessage(token, participant.chatId, participantMessage, { replyMarkup: participantKeyboard });
  }
  
  return { ok: true };
};
