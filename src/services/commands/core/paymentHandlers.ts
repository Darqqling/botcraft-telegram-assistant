
import { InlineKeyboardMarkup } from '../../telegramService';
import { sendMessage } from './messageUtils';

// Handle payment options command
export const handlePaymentOptionsCommand = async (
  token: string,
  chatId: number,
  collectionId: string
): Promise<any> => {
  const paymentMessage = `
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

–°–µ–π—á–∞—Å –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª".
  `;

  const paymentOptions: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: `i_paid:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `pay:${collectionId}` }
      ]
    ]
  };

  return sendMessage(token, chatId, paymentMessage, { replyMarkup: paymentOptions });
};

// Handle "I paid" confirmation
export const handleIPaidCommand = async (
  token: string,
  chatId: number,
  userId: number,
  firstName: string,
  collectionId: string,
  amount: number
): Promise<any> => {
  // This will send confirmation to the user
  const confirmationMessage = `
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∑–Ω–æ—Å!

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ ${amount} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º, –≤–∞—à –≤–∑–Ω–æ—Å –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ —Å–±–æ—Ä–µ.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  await sendMessage(token, chatId, confirmationMessage, { replyMarkup: backButton });

  // TODO: Send notification to the organizer with confirmation button
  // This part will be implemented in the payment handling
  
  return { ok: true };
};
