
import { sendMessage } from './messageUtils';
import { InlineKeyboardMarkup } from '@/services/telegram/types';
import { getCollectionById } from '../../storageService';

// Handle payment options command
export const handlePaymentOptionsCommand = async (
  token: string,
  chatId: number,
  collectionId: string,
  amount?: number
): Promise<any> => {
  console.log(`[PaymentHandlers] Handling payment options for collection ${collectionId} in chat ${chatId}`);
  
  // Get collection details
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(
      token,
      chatId,
      `–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    );
  }
  
  const amountText = amount ? `${amount} —Ä—É–±.` : "–≤–∑–Ω–æ—Å–∞";
  
  // Create keyboard with payment options
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { 
          text: "üíµ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –ª–∏—á–Ω–æ", 
          callback_data: amount ? `i_paid:${collectionId}:${amount}` : `i_paid:${collectionId}` 
        }
      ],
      [
        { 
          text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω (—Å–∫–æ—Ä–æ)", 
          callback_data: `pay_online:${collectionId}:${amount || ''}` 
        }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `pay:${collectionId}` }
      ]
    ]
  };
  
  return sendMessage(
    token,
    chatId,
    `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ${amountText} –¥–ª—è —Å–±–æ—Ä–∞ "${collection.title}":

üîπ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –ª–∏—á–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –ª–∏—á–Ω–æ
üîπ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ`,
    { replyMarkup: keyboard }
  );
};

// Handle I paid command
export const handleIPaidCommand = async (
  token: string,
  chatId: number,
  userId: number,
  firstName: string,
  collectionId: string,
  amount: number = 0
): Promise<any> => {
  console.log(`[PaymentHandlers] Handling I paid for collection ${collectionId} in chat ${chatId}, amount: ${amount}`);
  
  // Get collection details
  const collection = getCollectionById(collectionId);
  
  if (!collection) {
    return sendMessage(
      token,
      chatId,
      `–û—à–∏–±–∫–∞: —Å–±–æ—Ä —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    );
  }
  
  // Check if the user is a participant
  const participantIndex = collection.participants.findIndex(p => p.userId === userId);
  
  if (participantIndex === -1) {
    // User is not a participant, offer them to join
    const joinKeyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É", callback_data: `join:${collectionId}` }
        ],
        [
          { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }
        ]
      ]
    };
    
    return sendMessage(
      token,
      chatId,
      `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–±–æ—Ä–∞ "${collection.title}". –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å:`,
      { replyMarkup: joinKeyboard }
    );
  }
  
  // Proceed with marking payment as pending
  // In a real app, we would update the database here
  
  // Create message to send to organizer
  const organizerMessage = `
–£—á–∞—Å—Ç–Ω–∏–∫ ${firstName} —Å–æ–æ–±—â–∏–ª –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ ${amount} —Ä—É–±. –≤ —Å–±–æ—Ä "${collection.title}".

–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
  `;
  
  const organizerKeyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { 
          text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
          callback_data: `confirm_payment:${collectionId}:${userId}:${amount}` 
        }
      ],
      [
        { 
          text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
          callback_data: `reject_payment:${collectionId}:${userId}:${amount}` 
        }
      ]
    ]
  };
  
  // Send message to organizer (if not in test mode)
  if (collection.organizerId && collection.organizerId !== userId) {
    try {
      // In a real app, we would get the organizer's chat ID from the database
      // For now, we'll send it to the same chat for testing
      await sendMessage(
        token,
        chatId, // In real app: organizerChatId
        organizerMessage,
        { replyMarkup: organizerKeyboard }
      );
    } catch (error) {
      console.error(`[PaymentHandlers] Error sending message to organizer:`, error);
    }
  }
  
  // Confirmation to the user
  const userKeyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞", callback_data: `status:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };
  
  return sendMessage(
    token,
    chatId,
    `–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ ${amount} —Ä—É–±. –¥–ª—è —Å–±–æ—Ä–∞ "${collection.title}" –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.

–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
    { replyMarkup: userKeyboard }
  );
};

