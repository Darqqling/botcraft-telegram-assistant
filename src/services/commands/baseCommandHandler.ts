
import { ensureUserExists } from '../collectionService';
import { getCollectionById, getUserById, addChatHistoryMessage } from '../storageService';
import { sendMessage } from '../telegramService';
import { v4 as uuidv4 } from 'uuid';

// Helper function to send messages to group chats
export const sendGroupMessage = async (token: string, chatId: number, text: string) => {
  return sendMessage(token, chatId, text);
};

// Helper to log messages in chat history
const logChatMessage = (chatId: number, userId: number | undefined, messageText: string, isFromUser: boolean) => {
  const message = {
    id: uuidv4(),
    chatId,
    userId,
    messageText,
    isFromUser,
    timestamp: Date.now()
  };
  
  addChatHistoryMessage(message);
};

// Base function for processing commands
export const processCommand = async (
  token: string,
  message: any
): Promise<string | null> => {
  const text = message?.text;
  
  if (!text || typeof text !== 'string') {
    return null;
  }
  
  const userId = message?.from?.id;
  const chatId = message?.chat?.id;
  const firstName = message?.from?.first_name || 'User';
  const lastName = message?.from?.last_name;
  const username = message?.from?.username;
  const isGroupChat = message?.chat?.type === 'group' || message?.chat?.type === 'supergroup';
  
  if (!userId || !chatId) {
    return null;
  }
  
  // Log incoming command to chat history
  logChatMessage(chatId, userId, text, true);
  
  // Import handlers from specific command modules
  const { 
    handleNewCollection,
    handleGroupNewCollection 
  } = await import('./collectionCreationCommands');
  
  const { 
    handleJoinCollection,
    handlePay 
  } = await import('./participationCommands');
  
  const { 
    handleConfirmGift,
    handleCancel,
    handleUpdateAmount,
    handleSendReminders,
    handleConfirmPayment 
  } = await import('./organizerCommands');
  
  const { 
    handleStatus,
    handleCollectionStatus 
  } = await import('./statusCommands');
  
  const { 
    handleAddGiftOption,
    handleVote 
  } = await import('./giftOptionCommands');
  
  // Process command based on text
  let response: string | null = null;
  
  if (text.startsWith('/start')) {
    if (isGroupChat) {
      response = `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–±–æ—Ä–æ–≤ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏. üíù

–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:
- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä: /group_new_collection –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—É–º–º–∞|ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è|–°—Ä–æ–∫(–¥–Ω–∏)
- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É: /join_collection ID_—Å–±–æ—Ä–∞
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /collection_status ID_—Å–±–æ—Ä–∞

–î–ª—è –Ω–∞—á–∞–ª–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /group_new_collection!
`;
    } else {
      response = `
–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–±–æ—Ä–æ–≤ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

- –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–±–æ—Ä—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∑–Ω–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤
- –ü–æ–º–æ–≥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new_collection - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä
/join_collection - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É
/pay - –í–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ —Å–±–æ—Ä
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_collection!
`;
    }
  } else if (text.startsWith('/new_collection')) {
    response = await handleNewCollection(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/group_new_collection')) {
    response = await handleGroupNewCollection(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/join_collection')) {
    response = await handleJoinCollection(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/pay')) {
    response = await handlePay(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/confirm_payment')) {
    response = await handleConfirmPayment(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/confirm_gift')) {
    response = await handleConfirmGift(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/cancel')) {
    response = await handleCancel(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/status')) {
    response = await handleStatus(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/collection_status')) {
    response = await handleCollectionStatus(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/add_gift_option')) {
    response = await handleAddGiftOption(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/vote')) {
    response = await handleVote(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/update_amount')) {
    response = await handleUpdateAmount(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/send_reminders')) {
    response = await handleSendReminders(token, userId, chatId, firstName, text, lastName, username);
  } else if (text.startsWith('/help')) {
    response = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/new_collection –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—É–º–º–∞|ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è|ID —É—á–∞—Å—Ç–Ω–∏–∫–∞1,ID —É—á–∞—Å—Ç–Ω–∏–∫–∞2,...
- –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤

/group_new_collection –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–°—É–º–º–∞|ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è|–°—Ä–æ–∫(–¥–Ω–∏)
- –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–±–æ—Ä –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ

/join_collection ID_—Å–±–æ—Ä–∞
- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–±–æ—Ä—É

/pay ID_—Å–±–æ—Ä–∞ —Å—É–º–º–∞
- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞—à –≤–∑–Ω–æ—Å –≤ —Å–±–æ—Ä

/confirm_payment ID_—Å–±–æ—Ä–∞ ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)

/add_gift_option ID_—Å–±–æ—Ä–∞|–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ
- –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

/vote ID_—Å–±–æ—Ä–∞ ID_–≤–∞—Ä–∏–∞–Ω—Ç–∞
- –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∞—Ä–∫–∞

/collection_status ID_—Å–±–æ—Ä–∞
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞

/confirm_gift ID_—Å–±–æ—Ä–∞
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)

/cancel ID_—Å–±–æ—Ä–∞
- –û—Ç–º–µ–Ω—è–µ—Ç —Å–±–æ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)

/update_amount ID_—Å–±–æ—Ä–∞ –Ω–æ–≤–∞—è_—Å—É–º–º–∞
- –ò–∑–º–µ–Ω—è–µ—Ç —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É —Å–±–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)

/send_reminders ID_—Å–±–æ—Ä–∞
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)

/status ID_—Å–±–æ—Ä–∞
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞
`;
  }
  
  // Log bot response to chat history
  if (response) {
    logChatMessage(chatId, undefined, response, false);
    console.log(`[Bot Response to ${firstName} (${userId}) in chat ${chatId}]: ${response.substring(0, 100)}...`);
  }
  
  return response;
};
