
// Import the telegramService for API calls
import { sendMessage as telegramSendMessage, InlineKeyboardMarkup } from '../telegramService';

// Export sendMessage so it can be imported by other command handlers
export const sendMessage = async (
  botToken: string,
  chatId: number,
  text: string,
  options?: any
): Promise<any> => {
  // Use the telegram service to send the message
  return telegramSendMessage(botToken, chatId, text, options);
};

// Add sendGroupMessage which is used in participationCommands.ts
export const sendGroupMessage = async (
  botToken: string,
  chatId: number,
  text: string,
  options?: any
): Promise<any> => {
  // Implementation goes here - same as sendMessage for now
  return sendMessage(botToken, chatId, text, options);
};

// Handle start command by showing main menu buttons
export const handleStartCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  const welcomeMessage = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ë–æ—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
  `;

  const mainMenu: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä", callback_data: "new_collection" }
      ],
      [
        { text: "üîπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–±–æ—Ä—ã", callback_data: "my_collections" }
      ],
      [
        { text: "üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data: "how_it_works" }
      ],
      [
        { text: "üîπ –ü–æ–º–æ—â—å", callback_data: "help" }
      ]
    ]
  };

  return sendMessage(token, chatId, welcomeMessage, { replyMarkup: mainMenu });
};

// Handle help command
export const handleHelpCommand = async (
  token: string,
  chatId: number
): Promise<any> => {
  const helpMessage = `
üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–±–æ—Ä—ã".

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, helpMessage, { replyMarkup: backButton });
};

// Handle how_it_works command
export const handleHowItWorksCommand = async (
  token: string,
  chatId: number
): Promise<any> => {
  const howItWorksMessage = `
üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ë–æ—Ç:

1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–±–æ—Ä, —É–∫–∞–∑–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏–º —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
3Ô∏è‚É£ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–Ω–æ—Å—è—Ç —Å–≤–æ–∏ –≤–∑–Ω–æ—Å—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
4Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ —Å–æ–±—Ä–∞–Ω–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä
5Ô∏è‚É£ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞

–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–æ—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, howItWorksMessage, { replyMarkup: backButton });
};

// Handle my_collections command
export const handleMyCollectionsCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  // This will be implemented to fetch and display the user's collections
  const collectionsMessage = `
üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã:

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. 
–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–±–æ—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  return sendMessage(token, chatId, collectionsMessage, { replyMarkup: backButton });
};

// Handle back to main menu command
export const handleBackToMainCommand = async (
  token: string,
  chatId: number,
  userId: number
): Promise<any> => {
  return handleStartCommand(token, chatId, userId);
};

// Handle payment options command
export const handlePaymentOptionsCommand = async (
  token: string,
  chatId: number,
  collectionId: string
): Promise<any> => {
  const paymentMessage = `
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

–°–µ–π—á–∞—Å –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª".
  `;

  const paymentOptions: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: `i_paid:${collectionId}` }
      ],
      [
        { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `pay:${collectionId}` }
      ]
    ]
  };

  return sendMessage(token, chatId, paymentMessage, { replyMarkup: paymentOptions });
};

// Handle "I paid" confirmation
export const handleIPaidCommand = async (
  token: string,
  chatId: number,
  userId: number,
  firstName: string,
  collectionId: string,
  amount: number
): Promise<any> => {
  // This will send confirmation to the user
  const confirmationMessage = `
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∑–Ω–æ—Å!

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ ${amount} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º, –≤–∞—à –≤–∑–Ω–æ—Å –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –≤ —Å–±–æ—Ä–µ.
  `;

  const backButton: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }
      ]
    ]
  };

  await sendMessage(token, chatId, confirmationMessage, { replyMarkup: backButton });

  // TODO: Send notification to the organizer with confirmation button
  // This part will be implemented in the payment handling
  
  return { ok: true };
};

export const processCommand = (
  command: string,
  chatId: number,
  userId: number,
  botToken: string
): Promise<any> => {
  if (command === '/start') {
    return handleStartCommand(botToken, chatId, userId);
  } else if (command === '/help') {
    return handleHelpCommand(botToken, chatId);
  } else if (command === '/how_it_works') {
    return handleHowItWorksCommand(botToken, chatId);
  } else if (command === '/my_collections') {
    return handleMyCollectionsCommand(botToken, chatId, userId);
  } else {
    // For other commands, use existing handlers
    // Default response if no handler matches
    return sendMessage(botToken, chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
  }
};

export const processCallbackQuery = (
  callbackQuery: any,
  botToken: string
): Promise<any> => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const callbackData = callbackQuery.data;
  const firstName = callbackQuery.from.first_name;
  
  // Parse the callback data
  const parts = callbackData.split(':');
  const action = parts[0];
  
  // Handle different callback actions
  switch (action) {
    case 'new_collection':
      return handleNewCollectionCallback(callbackQuery, botToken);
    case 'group_new_collection':
      return handleGroupNewCollectionCallback(callbackQuery, botToken);
    case 'my_collections':
      return handleMyCollectionsCommand(botToken, chatId, userId);
    case 'how_it_works':
      return handleHowItWorksCommand(botToken, chatId);
    case 'help':
      return handleHelpCommand(botToken, chatId);
    case 'back_to_main':
      return handleBackToMainCommand(botToken, chatId, userId);
    case 'join':
      return handleJoinCollectionCallback(botToken, userId, chatId, firstName, parts);
    case 'pay':
      return handlePayCallback(botToken, userId, chatId, firstName, parts);
    case 'pay_amount':
      // Handle payment with predefined amount
      if (parts.length >= 3) {
        const collectionId = parts[1];
        const amount = parseFloat(parts[2]);
        return handleIPaidCommand(botToken, chatId, userId, firstName, collectionId, amount);
      }
      break;
    case 'payment_options':
      if (parts.length >= 2) {
        const collectionId = parts[1];
        return handlePaymentOptionsCommand(botToken, chatId, collectionId);
      }
      break;
    case 'i_paid':
      if (parts.length >= 2) {
        const collectionId = parts[1];
        // For now, assuming a default amount
        return handleIPaidCommand(botToken, chatId, userId, firstName, collectionId, 1000);
      }
      break;
    case 'status':
      return handleStatusCallback(callbackQuery, botToken);
    case 'collection_status':
      return handleCollectionStatusCallback(callbackQuery, botToken);
    case 'send_reminders':
      return handleSendRemindersCallback(callbackQuery, botToken);
    default:
      return sendMessage(botToken, chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
  
  // Default response if no handler matches
  return sendMessage(botToken, chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
};

// Import the command handlers without creating a circular dependency
import * as collectionCreationCommands from './collectionCreationCommands';
import * as participation from './participation'; // Update the import to use the new directory structure
import * as organizerCommands from './organizerCommands';
import * as statusCommands from './statusCommands';
import * as giftOptionCommands from './giftOptionCommands';

// These functions need to be added to handle callback data
export const handleNewCollectionCallback = collectionCreationCommands.handleNewCollectionCallback;
export const handleGroupNewCollectionCallback = collectionCreationCommands.handleGroupNewCollectionCallback;
export const handleSendRemindersCallback = organizerCommands.handleSendRemindersCallback;
export const handleStatusCallback = statusCommands.handleStatusCallback;
export const handleCollectionStatusCallback = statusCommands.handleCollectionStatusCallback;
export const { handleJoinCollectionCallback } = participation;
export const { handlePayCallback } = participation;
